/// <reference lib="webworker" />

import { build, files, timestamp } from '$service-worker';

const worker = self as unknown as ServiceWorkerGlobalScope;
const FILES = `static${timestamp}`;

// `build` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const to_cache = build.concat(files);
const staticAssets = new Set(to_cache);

worker.addEventListener('install', (event) => {
  console.log('[service worker] Installing');
  event.waitUntil(
    caches
      .open(FILES)
      .then(async (cache) => {
        await cache.addAll(to_cache);
        const off1 = await fetch('/offline');
        if (!off1.redirected) await cache.put('/offline', off1);
        const off2 = await fetch('/offline/');
        if (!off2.redirected) await cache.put('/offline/', off2);
      })
      .then(async () => {
        await worker.skipWaiting();
        console.log('[service worker] Installed');
      })
  );
});

worker.addEventListener('activate', (event) => {
  console.log('[service worker] Activating');

  event.waitUntil(
    caches.keys().then(async (keys) => {
      // delete old caches
      for (const key of keys) {
        if (key !== FILES) await caches.delete(key);
      }

      await worker.clients.claim();
      console.log('[service worker] Activate');
    })
  );
});

/**
 * Fetch the asset from the network and store it in the cache.
 * Fall back to the cache if the user is offline.
 */
async function fetchAndCache(request: Request) {
  const cache = await caches.open(`offline${timestamp}`);

  try {
    const response = await fetch(request);
    if (
      !response.headers.get('Expires') &&
      !response.headers.get('Cache-Control')?.includes('no-store') &&
      !response.headers.get('Cache-Control')?.includes('no-cache') &&
      !response.headers.get('Cache-Control')?.includes('max-age=0') &&
      response.headers.get('Pragma') != 'no-cache' &&
      response.status < 400
    )
      cache.put(request, response.clone());
    return response;
  } catch (err) {
    const url = new URL(request.url);
    if (url.host == worker.location.host && request.mode == 'navigate') {
      const c = await caches.open(FILES);
      if (await c.match('/offline'))
        return Response.redirect('/offline?redirect=' + new URL(request.url).pathname);
      else if (await c.match('/offline/'))
        return Response.redirect('/offline/?redirect=' + new URL(request.url).pathname);
    } else {
      const response = await cache.match(request);
      if (response) return response;
    }

    throw err;
  }
}

worker.addEventListener('fetch', (event) => {
  if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

  const url = new URL(event.request.url);

  // don't try to handle e.g. data: URIs
  const isHttp = url.protocol.startsWith('http');
  const isDevServerRequest =
    url.hostname === self.location.hostname && url.port !== self.location.port;
  const isStaticAsset =
    url.host === self.location.host &&
    (staticAssets.has(url.pathname) || url.pathname.startsWith('/offline'));
  const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;

  if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
    event.respondWith(
      (async () => {
        // always serve static files and bundler-generated assets from cache.
        // if your application has other URLs with data that will never change,
        // set this variable to true for them and they will only be fetched once.
        const cachedAsset =
          isStaticAsset && (await caches.match(event.request, { ignoreSearch: true }));

        return cachedAsset || fetchAndCache(event.request);
      })()
    );
  }
});
